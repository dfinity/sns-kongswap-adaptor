type TreasuryManagerResult = variant {
  Ok : Balances;
  Err : vec TransactionError;
};

type TransactionError = variant {
  Call : record { method : text; canister_id : principal; error : text };
  Postcondition : text;
  Precondition : text;
  Backend : text;
};

type Balances = record {
  timestamp_ns : nat64;
  balances : vec record { Asset; Balance };
};

type Balance = record {
  amount_decimals : nat;
  owner_account : Account;
};

type Account = record {
  owner : principal;
  subaccount : opt blob;
};

type Allowance = record {
  asset : Asset;
  amount_decimals : nat;
  owner_account : Account;
};

type Asset = variant {
  Token : record {
    ledger_fee_decimals : nat;
    ledger_canister_id : principal;
    symbol : text;
  };
};

type AuditTrail = record {
  transactions : vec Transaction;
};

type Transaction = record {
  result : TransactionResult;
  timestamp_ns : nat64;
  human_readable : text;
  canister_id : principal;
  treasury_manager_operation : TreasuryManagerOperation;
};

type TreasuryManagerOperation = variant {
  Withdraw;
  Deposit;
  IssueReward;
  Balances;
};

type TransactionResult = variant {
  Ok : TransactionWitness;
  Err : TransactionError;
};

type TransactionWitness = variant {
  NonLedger : text;
  Ledger : vec Transfer;
};

type Transfer = record {
  block_index : nat;
  amount_decimals : nat;
  ledger_canister_id : text;
};

type DepositRequest = record {
  allowances : vec Allowance;
};

type TreasuryManagerInit = record {
  allowances : vec Allowance;
};

type TreasuryManagerArg = variant {
  Upgrade : record {};
  Init : TreasuryManagerInit;
};

type WithdrawRequest = record {
  withdraw_accounts : opt Accounts;
};

type Accounts = record {
  ledger_id_to_account : vec record { principal; Account };
};

service : (TreasuryManagerArg) -> {
  deposit : (DepositRequest) -> (TreasuryManagerResult);
  withdraw : (WithdrawRequest) -> (TreasuryManagerResult);
  audit_trail : (record {}) -> (AuditTrail) query;
  balances : (record {}) -> (TreasuryManagerResult) query;
}
